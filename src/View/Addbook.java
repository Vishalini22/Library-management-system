/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.sql.*;
import Controller.Book;
import Model.BookModel;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class Addbook extends javax.swing.JFrame {

    private int id;

    /**
     * Creates new form Addbook
     */
    public Addbook() throws SQLException {
       
   try {
        initComponents();
        con = connect();  
        Data(); 
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error initializing database connection: " + ex.getMessage());
    }
    }
Connection con;
PreparedStatement pst;

public Connection connect() throws SQLException{
     try{
         
         
         Class.forName("com.mysql.cj.jdbc.Driver");

            
            String url = "jdbc:mysql://localhost:3306/library";  // "localhost" is used for local servers
            String username = "root"; 
            String password = "";  

           
            return DriverManager.getConnection(url, username, password);

        } catch (ClassNotFoundException | SQLException e) {

            throw new SQLException("Error connecting to the database", e);
        }
     
     
    }
     
         
        
   private void Data() {
    try {
        // SQL to fetch data from the addbook table
        String query = "SELECT * FROM addbook";
        pst = con.prepareStatement(query);
        ResultSet Rs = pst.executeQuery();
        ResultSetMetaData RSMD = Rs.getMetaData();

        // Get the column count to know how many columns to display
        int columnCount = RSMD.getColumnCount();
        
        // Create a DefaultTableModel to display data in the JTable
        DefaultTableModel model = (DefaultTableModel) JTab.getModel();
        model.setRowCount(0); // Clear existing rows
        
        while (Rs.next()) {
            Vector<String> row = new Vector<>();
            for (int i = 1; i <= columnCount; i++) {
                row.add(Rs.getString(i));
            }
            model.addRow(row); // Add each row of data to the table
        }
    } catch (SQLException ex) {
        // Handle SQL exceptions, such as connection issues, query issues, etc.
        JOptionPane.showMessageDialog(null, "Error loading data: " + ex.getMessage());
    }
}



             
         
     


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTab = new javax.swing.JTable();

        jLabel6.setText("jLabel6");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel1.setText("Title");

        jLabel2.setFont(new java.awt.Font("Segoe UI Emoji", 1, 24)); // NOI18N
        jLabel2.setText("Book Details");

        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel3.setText("Author");

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel4.setText("Year Published");

        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel5.setText("Category");

        txtAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel7.setText("Id");

        txtid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtidActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Back.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        JTab.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        JTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Year", "Category"
            }
        ));
        jScrollPane2.setViewportView(JTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtYear)
                            .addComponent(txtCategory)
                            .addComponent(txtAuthor)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(147, 147, 147))
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(btnAdd)
                .addGap(115, 115, 115)
                .addComponent(btnDelete)
                .addGap(97, 97, 97)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back)
                .addGap(77, 77, 77))
            .addGroup(layout.createSequentialGroup()
                .addGap(321, 321, 321)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(jButton2)
                    .addComponent(Back))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleActionPerformed

    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearActionPerformed

    private void txtAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
// Inside AddBookk class





                                      
 // Get input from the text fields
String idStr = txtid.getText();
        String title = txtTitle.getText();
        String author = txtAuthor.getText();
        String yearStr = txtYear.getText();  // Assuming it's a String field
        String category = txtCategory.getText();

        // Validate input
        if (idStr.isEmpty() || title.isEmpty() || author.isEmpty() || yearStr.isEmpty() || category.isEmpty()) {
            showMessage("All fields must be filled!");
            Data();
            return;
        }

        int id = 0;
try {
    id = Integer.parseInt(idStr);  
} catch (NumberFormatException e) {
    showMessage("ID must be a valid number!");
    Data();
    return;
}


String year = yearStr; 

int yearInt = 0;  
try {
   
    yearInt = Integer.parseInt(yearStr); 
} catch (NumberFormatException e) {
    
     showMessage("Year must be a valid number!");
     Data();
    
}

// Now create the BookModel object
BookModel book = new BookModel(id, title, author, yearInt, category);  


Book b = new Book();
boolean isAdd = b.addbook(book);  


if (isAdd) {
    JOptionPane.showMessageDialog(this, "Book added successfully to the table!");
    Data();
} else {
    JOptionPane.showMessageDialog(this, "Error adding book to the table!");
    Data();
}
        
    }

    
   
public void showMessage(String message) {
    JOptionPane.showMessageDialog(this, message);
    Data();

    }//GEN-LAST:event_btnAddActionPerformed


        
    private void txtidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtidActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

       String idStr = txtid.getText();   // Assume txtid is the ID input field
    String title = txtTitle.getText(); // Title input field
    String author = txtAuthor.getText(); // Author input field
    String yearStr = txtYear.getText();  // Year input field
    String category = txtCategory.getText(); // Category input field

    // Step 2: Validate the input (convert to correct types)
    int idInt = 0;
    try {
        idInt = Integer.parseInt(idStr);  // Convert ID from String to int
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please enter a valid ID.");
        return;  // Exit if invalid ID
    }

    int yearInt = 0;
    try {
        yearInt = Integer.parseInt(yearStr);  // Convert Year from String to int
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please enter a valid year.");
        return;  // Exit if invalid year
    }

    // Step 3: Prepare the SQL UPDATE query
    String query = "UPDATE addbook SET Title = ?, Author = ?, Year = ?, Category = ? WHERE ID = ?";

    try {
        // Step 4: Create the PreparedStatement and set parameters
        pst = con.prepareStatement(query);
        pst.setString(1, title);      // Set Title
        pst.setString(2, author);     // Set Author
        pst.setInt(3, yearInt);       // Set Year
        pst.setString(4, category);   // Set Category
        pst.setInt(5, idInt);         // Set ID

        // Step 5: Execute the update query
        int rowsAffected = pst.executeUpdate();

        // Step 6: Check if the update was successful
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Book updated successfully!");
            Data();  // Refresh the table data (optional)
        } else {
            JOptionPane.showMessageDialog(null, "Failed to update the book. Please try again.");
        }
    } catch (SQLException ex) {
        // Step 7: Handle exceptions (e.g., database errors)
        JOptionPane.showMessageDialog(null, "Error updating book: " + ex.getMessage());
        Logger.getLogger(Addbook.class.getName()).log(Level.SEVERE, null, ex);
    
}

        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       
        
        String idStr = txtid.getText(); // Retrieve the ID entered in the text field
    int idInt = 0; // Variable to store the parsed ID

    // Step 2: Validate the ID input (ensure it's an integer)
    try {
        idInt = Integer.parseInt(idStr);  // Convert the ID from String to int
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please enter a valid ID.");
        return;  // Exit if the ID is invalid
    }

    // Step 3: Prepare the SQL DELETE query
    String query = "DELETE FROM addbook WHERE ID = ?";

    try {
        // Step 4: Create a PreparedStatement and set the ID parameter
        pst = con.prepareStatement(query);
        pst.setInt(1, idInt);  // Set the ID to delete

        // Step 5: Execute the DELETE query
        int rowsAffected = pst.executeUpdate();

        // Step 6: Check if any rows were affected (i.e., if the book was deleted)
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Book deleted successfully!");
            Data();  // Refresh the table data after deletion
        } else {
            JOptionPane.showMessageDialog(null, "No book found with the specified ID.");
        }
    } catch (SQLException ex) {
        // Step 7: Handle exceptions (e.g., SQL errors)
        JOptionPane.showMessageDialog(null, "Error deleting book: " + ex.getMessage());
        Logger.getLogger(Addbook.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
         new Dashboard().setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Addbook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Addbook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Addbook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Addbook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Addbook().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Addbook.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTable JTab;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtYear;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables

    private void Connect() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
